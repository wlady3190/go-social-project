para hpt reloading
AIR
 cambiar en la config tmp_dir = "bin"
  args_bin = []
  bin = "./bin/main"
  cmd = "go build -o ./bin/main ./cmd/api"
  delay = 1000
  exclude_dir = ["assets", "bin", "vendor", "testdata", "web", "docs", "scripts"] web por que ahi va el frontend, docs y scripts

instalar direnv
ejecutar direnv allow .

instalar golang migrate para migraciones

go get -u -d github.com/golang-migrate/migrate/cmd/migrate
Crear archivos de migraciones
migrate create -seq -ext sql -dir ./cmd/migrate/migrations/ create_users
Migrar las tablas
migrate -path= ./cmd/migrate/migrations -database="postgres://admin:adminpassword@localhost/social?sslmode=disable" up
forzar  auna determinada migraci贸n
migrate -path=./cmd/migrate/migrations -database="postgres://admin:adminpassword@localhost/social?sslmode=disable" force 1

Con el Makefile
make migrate-create name=alter_post_table

Validator
go get 	"github.com/go-playground/validator/v10"

SWAGGER
go install github.com/swaggo/swag/cmd/swag@latest
swag init
go get -u github.com/swaggo/http-swagger
y eso va en los imports de api.go

-> construir el comando en el makefile para ejecutar swagger

tener la carpeta de docs y el archivo de docs.go para que se generen los archivosy usar en el main y en api.go

para acceder: http://localhost:8080/v1/swagger/index.html


Para que se actualicen los docs, en air.toml -> actualizar    pre_cmd = ["make gen-docs"]

LOGGING ESTRUCTURADO
go get -u go.uber.org/zap

CORS 
go get github.com/go-chi/cors

de vez en cuando hacer tidy en go.mod

Para ejecutar el redis, se ejecuta: docker exec -it redis redis-cli KEYS "*"

Para ver conexiones activas lsof -i :puerto (* opcional el puerto)

pruebas de solicitudes:
npx autocannon -r 22 -d 1 -c 1 --renderStatusCodes http://localhost:8080/v1/health
22 request q duran 1 segundo con una concurrencia


root = "."
testdata_dir = "testdata"
tmp_dir = "bin"

[build]
  args_bin = []
  bin = "./bin/main"
  cmd = "go build -o ./bin/main ./cmd/api"
  delay = 1000
  exclude_dir = ["assets", "bin", "vendor", "testdata", "web", "docs", "scripts"]
  exclude_file = []
  exclude_regex = ["_test.go"]
  exclude_unchanged = false
  follow_symlink = false
  full_bin = ""
  include_dir = []
  include_ext = ["go", "tpl", "tmpl", "html"]
  include_file = []
  kill_delay = "0s"
  log = "build-errors.log"
  poll = false
  poll_interval = 0
  post_cmd = []
  pre_cmd = ["make gen-docs"]
  rerun = false
  rerun_delay = 500
  send_interrupt = false
  stop_on_error = false

[color]
  app = ""
  build = "yellow"
  main = "magenta"
  runner = "green"
  watcher = "cyan"

[log]
  main_only = false
  silent = false
  time = false

[misc]
  clean_on_exit = false

[proxy]
  app_port = 0
  enabled = false
  proxy_port = 0

[screen]
  clear_on_rebuild = false
  keep_scroll = true

CORS
go get github.com/go-chi/cors

CI/CD 
creaci贸n de FIne-grained token
-> colocar expiraci贸n
-> Only selcted repositories (Seleccionar el repo)
-> Permisions
  actions -> read and write
  contents -> read and write
  metadat -> read-Only
  pull requests -> r&w
  y generar la Clase

-> settings -> Secrets and variables -> actions -> New repository secret -> escribur MY_RELEASE_PLEASE_TOKEN y pegar el token generado
-> cuando se haga el commit, se debe ir a la ejecuci贸n de las actions y aceptar el Pull Request 



